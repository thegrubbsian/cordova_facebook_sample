@mixin linear_gradient($pos, $G1, $G2: false,
                        $G3: false, $G4: false,
                        $G5: false, $G6: false,
                        $G7: false, $G8: false,
                        $G9: false, $G10: false,
                        $fallback: false) {

  // Detect what type of value exists in $pos
  $pos-type: type-of(nth($pos, 1));

  // If $pos is missing from mixin, reassign vars and add default position
  @if ($pos-type == color) or (nth($pos, 1) == "transparent") {
    $G10: $G9; $G9: $G8; $G8: $G7; $G7: $G6; $G6: $G5;
    $G5: $G4; $G4: $G3; $G3: $G2; $G2: $G1; $G1: $pos;
    $pos: top; // Default position
  }

  $usual:($G1);
  $webkit: color-stop($G1);
  @each $g in $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10 {
    @if $g != false {
      $usual: $usual + ',' + $g;
      $webkit: $webkit + ',' + color-stop($g);
    }
  }
  $usual: unquote($usual);
  $webkit: unquote($webkit);

  // Set $G1 as the default fallback color
  $fallback-color: nth($G1, 1);

  // If $fallback is a color use that color as the fallback color
  @if (type-of($fallback) == color) or ($fallback == "transparent") {
    $fallback-color: $fallback;
  }

  background-color: $fallback-color;
  background: deprecated-webkit-gradient(linear, $usual); // Safari <= 5.0
  background: -webkit-gradient(linear, $pos, $webkit); // Safari 5.1+, Chrome
  background: -webkit-linear-gradient($pos, $usual); // Safari 5.1+, Chrome
  background: -moz-linear-gradient($pos, $usual);
  background: -ms-linear-gradient($pos, $usual);
  background: -o-linear-gradient($pos, $usual);
  background: linear-gradient($pos, $usual);

  body.pre_ie9 & {
    -pie-background: linear-gradient($pos, $usual);
    behavior: url("/PIE.htc");
  }
}
